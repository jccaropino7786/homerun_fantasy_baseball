{"ast":null,"code":"/**\n * @remix-run/router v1.6.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref,\n\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    createURL,\n\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (manifest === void 0) {\n    manifest = {};\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n\n  routes.forEach((route, index) => {\n    var _route$path; // coarse-grain check for optional params\n\n\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments; // Optional path segments are denoted by a trailing `?`\n\n  let isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\"))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push(...restExploded);\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  let path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  } // ensure `/` is added at the beginning if the path is absolute\n\n\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1; // only apply the splat if it's the last segment\n\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      const starParam = params[star]; // Apply the splat\n\n      return starParam;\n    }\n\n    const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n\n      if (optional === \"?\") {\n        return param == null ? \"\" : param;\n      }\n\n      if (param == null) {\n        invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n      }\n\n      return param;\n    } // Remove any optional markers from optional static segments\n\n\n    return segment.replace(/\\?$/g, \"\");\n  }) // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\n\nclass AbortedDeferredError extends Error {}\n\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\n\nclass ErrorResponse {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\n\n\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n}); //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  } // Routes keyed by ID\n\n\n  let manifest = {}; // Routes in tree format for matching\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\"; // Config driven behavior flags\n\n  let future = _extends({\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false\n  }, init.future); // Cleanup function for history\n\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(m => m.route.lazy) && ( // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(m => m.route.loader) || init.hydrationData != null);\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  let blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  let ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref; // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n\n          reset() {\n            deleteBlocker(blockerKey);\n            updateState({\n              blockers: new Map(router.state.blockers)\n            });\n          }\n\n        });\n        return;\n      }\n\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n\n\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    } // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n\n\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers: new Map(state.blockers)\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          }); // Send the same navigation through\n\n          navigate(to, opts);\n        },\n\n        reset() {\n          deleteBlocker(blockerKey);\n          updateState({\n            blockers: new Map(state.blockers)\n          });\n        }\n\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n\n\n    if (isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation; // Create a GET request for the loaders\n\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace;\n\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = _extends({\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      }, submission);\n\n      loadingNavigation = navigation;\n    } // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n\n\n    let activeSubmission = submission || fetcherSubmission ? submission || fetcherSubmission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n      formMethod: loadingNavigation.formMethod,\n      formAction: loadingNavigation.formAction,\n      formData: loadingNavigation.formData,\n      formEncType: loadingNavigation.formEncType\n    } : undefined;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(rf => {\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    }); // Proxy navigation abort through to revalidation fetchers\n\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key)); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }));\n      return;\n    }\n\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return startRedirectNavigation(state, actionResult, {\n        submission,\n        isFetchActionRedirect: true\n      });\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission, {\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    ); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = _extends({\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename); // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      fetchRedirectIds.add(key);\n      await startRedirectNavigation(state, result);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(state, redirect, _temp) {\n    var _window;\n\n    let {\n      submission,\n      replace,\n      isFetchActionRedirect\n    } = _temp === void 0 ? {} : _temp;\n\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, // TODO: This can be removed once we get rid of useTransition in Remix v2\n    _extends({\n      _isRedirect: true\n    }, isFetchActionRedirect ? {\n      _isFetchActionRedirect: true\n    } : {}));\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an absolute external redirect that goes to a new origin\n\n    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser && typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\") {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename = stripBasename(url.pathname, basename) == null;\n\n      if (window.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n\n    let {\n      formMethod,\n      formAction,\n      formEncType,\n      formData\n    } = state.navigation;\n\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData\n      };\n    } // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, submission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        },\n        fetcherSubmission: submission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n\n\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    state.blockers.set(key, newBlocker);\n    updateState({\n      blockers: new Map(state.blockers)\n    });\n  }\n\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n\n\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes) {\n    inFlightDataRoutes = newRoutes;\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext, match);\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      var _result$activeDeferre;\n\n      let data = Object.values(result.loaderData)[0];\n\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, true, isRouteRequest, requestContext);\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    } // Create a GET request for the loaders\n\n\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, true, isRouteRequest, requestContext))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Process and commit output from loaders\n\n\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n}\n\nfunction normalizeTo(location, matches, basename, prependBasename, to, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n\n    for (let match of matches) {\n      contextualMatches.push(match);\n\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  } // Resolve the relative path\n\n\n  let path = resolveTo(to ? to : \".\", getPathContributingMatches(contextualMatches).map(m => m.pathnameBase), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\"); // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  } // Add an ?index param for matched index routes if we don't already have one\n\n\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  } // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n\n\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  let submission;\n\n  if (opts.formData) {\n    let formMethod = opts.formMethod || \"get\";\n    submission = {\n      formMethod: normalizeFormMethod ? formMethod.toUpperCase() : formMethod.toLowerCase(),\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path,\n        submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData); // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location); // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (match.route.loader == null) {\n      return false;\n    } // Always call the loader on new route instances and pending defer cancellations\n\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate: // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(m => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename); // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n      return;\n    } // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n\n\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params\n    }, submission, {\n      actionResult,\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      defaultShouldRevalidate: isRevalidationRequired\n    }));\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\n\n\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy(); // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\"); // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n\n  let routeUpdates = {};\n\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined && // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  } // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n\n\n  Object.assign(routeToUpdate, routeUpdates); // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\n\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, isStaticRequest, isRouteRequest, requestContext) {\n  if (isStaticRequest === void 0) {\n    isStaticRequest = false;\n  }\n\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n\n  let resultType;\n  let result;\n  let onReject;\n\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n\n    onReject = () => reject();\n\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: requestContext\n    }), abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([runHandler(handler), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status; // Process redirects\n\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in internal redirects\n\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      } // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission; // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      } // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  for (let match of matches) {\n    let id = match.route.id;\n\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\n\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // No hash -> hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // current hash -> same hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // current hash -> new hash\n    return true;\n  }\n\n  return false;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index]; // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename };","map":{"version":3,"sources":["../history.ts","../utils.ts","../router.ts"],"names":["Action","PopStateEventType","options","initialEntries","v5Compat","entries","createMemoryLocation","entry","index","clampIndex","initialIndex","action","listener","Math","state","location","createLocation","getCurrentLocation","warning","JSON","createPath","history","createURL","createHref","encodeLocation","path","parsePath","pathname","search","hash","push","nextLocation","delta","replace","go","nextIndex","listen","window","globalHistory","getUrlBasedHistory","base","href","url","hashIndex","value","console","usr","key","idx","current","to","createKey","parsedPath","searchIndex","document","getIndex","validateLocation","historyState","getHistoryState","invariant","getLocation","ResultType","immutableRouteKeys","route","parentPath","manifest","treePath","id","isIndexRoute","indexRoute","mapRouteProperties","pathOrLayoutRoute","children","undefined","convertRoutesToDataRoutes","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","meta","relativePath","caseSensitive","childrenIndex","joinPaths","routesMeta","score","computeScore","routes","includes","explodeOptionalSegments","segments","isOptional","first","required","rest","restExploded","result","subpath","exploded","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","segment","siblings","n","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","originalPath","prefix","isLastSegment","array","star","starParam","keyMatch","param","optional","pattern","compilePath","captureGroups","paramName","splatValue","memo","safelyDecodeURIComponent","paramNames","regexpSource","matcher","decodeURI","error","decodeURIComponent","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","field","isPathRelative","getInvalidPathError","isEmptyPath","toArg","from","routePathnameIndex","routePathnames","toSegments","hasExplicitTrailingSlash","hasCurrentTrailingSlash","locationPathname","paths","json","init","responseInit","status","headers","DeferredData","constructor","data","Array","reject","onAbort","trackPromise","promise","Promise","get","onSettle","emit","subscriber","subscribe","cancel","resolveData","aborted","signal","resolve","done","unwrappedData","unwrapTrackedPromise","pendingKeys","isTrackedPromise","defer","redirect","ErrorResponse","internal","statusText","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","isBrowser","isServer","defaultMapRouteProperties","hasErrorBoundary","Boolean","detectErrorBoundary","dataRoutes","future","v7_normalizeFormMethod","v7_prependBasename","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","matchRoutes","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","deleteBlocker","updateState","router","startNavigation","pendingNavigationController","deleteFetcher","isActionReload","isMutationMethod","_isRedirect","newState","mergeLoaderData","inFlightDataRoutes","getSavedScrollPosition","normalizedPath","normalizeTo","opts","normalizeNavigateOptions","userReplace","submission","navigate","pendingError","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","cancelActiveDeferreds","completeNavigation","isHashChangeOnly","request","createClientSideRequest","findNearestBoundary","actionOutput","handleAction","pendingActionData","handleLoaders","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","shortCircuited","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","pendingActionError","isDeferredResult","activeSubmission","getMatchesToLoad","matchesToLoad","revalidatingFetchers","updatedFetchers","markFetchRedirectsDone","rf","fetcher","revalidatingFetcher","abortPendingFetchRevalidations","f","abortFetcher","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","setFetcherError","handleFetcherAction","handleFetcherLoader","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","isFetchActionRedirect","revalidationRequest","loadId","loadFetcher","staleKey","r","doneFetcher","resolveDeferredData","redirectLocation","_isFetchActionRedirect","isDifferentBasename","redirectHistoryAction","fetcherSubmission","results","loaderResults","resolveDeferredResults","fetchersToLoad","controller","getFetcher","doneKeys","markFetchersDone","yeetedKeys","blocker","newBlocker","blockerFunction","cancelledRouteIds","predicate","dfd","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","_internalSetRoutes","UNSAFE_DEFERRED_SYMBOL","Symbol","requestContext","isValidMethod","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","submit","routeMatch","loadRouteData","isQueryRouteResponse","e","isRedirectResponse","isRouteRequest","Location","context","isRouteErrorResponse","loaderRequest","requestMatches","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","queryRoute","getStaticContextFromError","newContext","fromRouteId","relative","contextualMatches","activeRouteMatch","resolveTo","getPathContributingMatches","hasNakedIndexQuery","prependBasename","isSubmissionNavigation","normalizeFormMethod","stripHashFromPath","searchParams","convertFormDataToSearchParams","isFetcher","boundaryMatches","currentUrl","nextUrl","boundaryId","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","isNew","currentMatch","isMissingData","currentLoaderData","currentPath","loaderMatch","routeChoice","arg","lazyRoute","routeToUpdate","routeUpdates","staticRouteValue","isPropertyStaticallyDefined","lazyRouteProperty","lazy","isStaticRequest","runHandler","handler","abortPromise","onReject","values","loadLazyRouteModule","resultType","isSameBasename","revalidate","response","contentType","isDeferredData","foundError","mergedLoaderData","newLoaderData","eligibleMatches","errorMessage","deferred","obj","currentMatches","isRevalidatingLoader","signals","unwrap","v","handle","pathMatches"],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { warning, invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on <Form>,\n * useSubmit(), <fetcher.Form>, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod | V7_FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<DataFunctionValue> | DataFunctionValue;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<DataFunctionValue> | DataFunctionValue;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<Omit<R, ImmutableRouteKey>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        const starParam = params[star];\n\n        // Apply the splat\n        return starParam;\n      }\n\n      const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n\n        if (optional === \"?\") {\n          return param == null ? \"\" : param;\n        }\n\n        if (param == null) {\n          invariant(false, `Missing \":${key}\" param`);\n        }\n\n        return param;\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  DataResult,\n  DeferredData,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  DetectErrorBoundaryFunction,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  ShouldRevalidateFunction,\n  RouteManifest,\n  ImmutableRouteKey,\n  ActionFunction,\n  LoaderFunction,\n  V7_MutationFormMethod,\n  V7_FormMethod,\n  HTMLFormMethod,\n  MutationFormMethod,\n  MapRoutePropertiesFunction,\n} from \"./utils\";\nimport {\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_normalizeFormMethod: boolean;\n  v7_prependBasename: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\ntype BaseNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  fromRouteId?: string;\n};\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | V7_FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod | V7_FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | V7_FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod | V7_FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    !initialMatches.some((m) => m.route.lazy) &&\n    // And we have to either have no loaders or have been provided hydrationData\n    (!initialMatches.some((m) => m.route.loader) || init.hydrationData != null);\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              deleteBlocker(blockerKey!);\n              updateState({ blockers: new Map(router.state.blockers) });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers: new Map(state.blockers),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey!);\n          updateState({ blockers: new Map(state.blockers) });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n    if (\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission || fetcherSubmission\n        ? submission || fetcherSubmission\n        : loadingNavigation.formMethod &&\n          loadingNavigation.formAction &&\n          loadingNavigation.formData &&\n          loadingNavigation.formEncType\n        ? {\n            formMethod: loadingNavigation.formMethod,\n            formAction: loadingNavigation.formAction,\n            formData: loadingNavigation.formData,\n            formEncType: loadingNavigation.formEncType,\n          }\n        : undefined;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n        ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach((rf) => {\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      mapRouteProperties,\n      basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        submission,\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      mapRouteProperties,\n      basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      fetchRedirectIds.add(key);\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n    // Check if this an absolute external redirect that goes to a new origin\n    if (\n      ABSOLUTE_URL_REGEX.test(redirect.location) &&\n      isBrowser &&\n      typeof window?.location !== \"undefined\"\n    ) {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename = stripBasename(url.pathname, basename) == null;\n\n      if (window.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        },\n        fetcherSubmission: submission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            f.match,\n            f.matches,\n            manifest,\n            mapRouteProperties,\n            basename\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    state.blockers.set(key, newBlocker);\n    updateState({ blockers: new Map(state.blockers) });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    inFlightDataRoutes = newRoutes;\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getPathContributingMatches(contextualMatches).map((m) => m.pathnameBase),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: RouterNavigateOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    let formMethod = opts.formMethod || \"get\";\n    submission = {\n      formMethod: normalizeFormMethod\n        ? (formMethod.toUpperCase() as V7_FormMethod)\n        : (formMethod.toLowerCase() as FormMethod),\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n        isRevalidationRequired ||\n        // Clicked the same link, resubmitted a GET form\n        currentUrl.pathname + currentUrl.search ===\n          nextUrl.pathname + nextUrl.search ||\n        // Search params affect all loaders\n        currentUrl.search !== nextUrl.search ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some((m) => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params,\n      ...submission,\n      actionResult,\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      defaultShouldRevalidate: isRevalidationRequired,\n    });\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: Parameters<ShouldRevalidateFunction>[0]\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  basename: string,\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([\n          runHandler(handler),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(\n          new URL(request.url),\n          matches.slice(0, matches.indexOf(match) + 1),\n          basename,\n          true,\n          location\n        );\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // No hash -> hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // current hash -> same hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // current hash -> new hash\n    return true;\n  }\n\n  return false;\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}